var apidoc = require('./node-api-doc'), assert = require('assert'), execFile = require('child_process').execFile, path = require('path');

var fakeNodeRoot = 'testdata';
apidoc.apiDocDir = path.join(fakeNodeRoot, 'doc/api');
apidoc.generateJSPath = path.join(fakeNodeRoot, 'tools/doc/generate.js');
var bufferMarkdownDoc = 'testdata/doc/api/buffer.markdown';
var fooMarkdownDoc = 'testdata/doc/api/foo.markdown';
var zippedMarkdownDoc = 'testdata/doc/api/zipped.markdown.gz';


describe('node-api-doc doc generation', function() {
  it('lists doc source files', function(done) {
    apidoc.listDocSourceFiles(function(err, srcFiles) {
      assert.ifError(err);
      assert.deepEqual(srcFiles, ['buffer', 'foo'].map(function(f) { return path.join(apidoc.apiDocDir, f + '.markdown'); }));
      done();
    });
  });
  it('gets JSON output from the generate.js script', function(done) {
    apidoc.generateDoc(fooMarkdownDoc, function(err, doc) {
      assert.ifError(err);
      assert.equal(doc.source, fooMarkdownDoc);
      assert.equal(doc.modules.length, 1);
      assert.equal(doc.modules[0].name, 'foo');
      assert.equal(doc.modules[0].methods[0].name, 'fizz');
      assert.equal(doc.modules[0].classes[0].name, 'Bar');
      done();
    });
  });
  it.skip('generates docs from .markdown.gz files (if no .markdown file exists)', function(done) {
    apidoc.generateDoc(zippedMarkdownDoc, function(err, doc) {
      assert.ifError(err);
      assert.equal(doc.source, zippedMarkdownDoc);
      assert.equal(doc.modules.length, 1);
      assert.equal(doc.modules[0].name, 'zipped');
      assert.equal(doc.modules[0].methods[0].name, 'zap');
      done();
    });
  });
  it('generates all docs', function(done) {
    apidoc.generateAllDocs(function(err, doc) {
      assert.ifError(err);
      assert.equal(doc.modules.length, 2);
      assert.equal(doc.modules[0].source, bufferMarkdownDoc);
      done();
    });
  });
});

describe('tern condense output', function() {
  it('should match expected', function(done) {
    var want = require('./testdata/lib/foo.json');
    execFile(
      process.execPath /* node */,
      [
        'node_modules/tern/bin/condense',
        '--plugin', 'node-api-doc={"apiDocDir":"testdata/doc/api","apiSrcDir":"testdata/lib","generateJSPath":"testdata/tools/doc/generate.js"}',
        '--plugin', 'node', '--plugin', 'doc_comment',
        'testdata/lib/foo.js',
      ], function(err, stdout) {
        assert.ifError(err);
        var got = JSON.parse(stdout);
        var util = require('util');
        // TODO(sqs): deepEqual was failing although the objects appeared identical
        assert.equal(JSON.stringify(want), JSON.stringify(got));
        done();
      });
  });
});
