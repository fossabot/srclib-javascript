#!/usr/bin/env node

var parser = require("nomnom");
var glob = require("glob");
var findpkgs = require("commonjs-findpkgs");
var jsgAdapter = require("../lib/jsg_adapter")
var npm = require("npm");
var path = require("path");
var execFile = require("child_process").execFile;
var fs = require("fs");
var find_bower = require('../lib/find_bower.js')

function collectDeps(deps, scope) {
  var processed_deps = [];
  deps = deps || [];
  var keys = Object.keys(deps);
  for(var i=0; i<keys.length; i++) {
    processed_deps.push({
      name: keys[i],
      version: deps[keys[i]],
      scope: scope
    })
  }
  return processed_deps;
}

parser.command("scan-commonjs")
  .option("repo", {
    help: "repository URI"
  })
  .option("subdir", {
    help: "subdirectory in repository"
  })
  .callback(function(opts) {
    // TODO(sqs): support ScanIgnore from repo Srcfile (pass to findpkgs ignore param)
    findpkgs(".", ["node_modules", "bower_components"], function scanNpmPackages(err, pkgs) {
      if (err) {
        console.error("Scanning for NPM packages failed:", err);
        process.exit(1);
      }

      // omit package.json files that have syntax errors
      pkgs = pkgs.filter(function(pkg) { return !pkg.error; });

      // filter out undesirable packages (packages whose paths contain
      // "node_modules", "test", etc.)
      pkgs = pkgs.filter(function(pkg) {
        // TODO(sqs): we probably want to process things in node_modules for
        // local code, so remove this filter.
        var pathComps = pkg.dir.split("/");
        return pathComps.indexOf("node_modules") == -1 && pathComps.indexOf("test") == -1 && pathComps.indexOf("templates") == -1 && pathComps.indexOf("bower_components") == -1;
      });

      // filter out undesirable source files (minified files) from
      // packages
      pkgs.forEach(function(pkg) {
        pkg.libFiles = pkg.libFiles.filter(function(f) {
          return !/\.min\.js$/.test(f);
        });
      });

      // automatically include files in the src dir (not just
      // lib). this is somewhat common for client-side libs even
      // though it is technically in violation of the commonjs spec.
      // TODO(sqs): add this functionality (as an option?) to commonjs-findpkgs?
      pkgs.forEach(function(pkg) {
        var srcFiles = glob.sync(path.join(pkg.dir, 'src/**/*.js'));
        if (srcFiles) pkg.libFiles.push.apply(pkg.libFiles, srcFiles);
      });        

      // automatically include files in the dir containing the main file (if it's a subdir)
      // TODO(sqs): add this functionality (as an option?) to commonjs-findpkgs?
      pkgs.forEach(function(pkg) {
        if (pkg.package.main && pkg.package.main.indexOf('/') != -1) {
          var files = glob.sync(path.join(pkg.dir, path.dirname(pkg.package.main), '**/*.js'));
          if (files) pkg.libFiles.push.apply(pkg.libFiles, files);
        }
      });        

      // convert from commonjs-findpkgs format to source unit
      var srcunits = pkgs.map(function(pkg) {
        // collect all deps
        //var allDeps = [{name: "node", "version": ""}];

        files = arrayUnique(pkg.libFiles.concat(pkg.testFiles).filter(function(f) { return fs.statSync(f).isFile(); }));

        var allDeps = [];
        allDeps.push.apply(allDeps, collectDeps(pkg.package.dependencies, "dependencies"));
        allDeps.push.apply(allDeps, collectDeps(pkg.package.devDependencies, "devDependencies"));

        return {
          Name: pkg.package.name,
          Type: "CommonJSPackage",
          Dir: pkg.dir,
          Files: files,
          Dependencies: allDeps,
          Data: pkg.package,
          Ops: {depresolve: null, graph: null},
          Config: {}
        };
      });

      find_bower('.', ["bower_components", "node_modules"], function(err, bower_pkgs) {
        if (err) {
          console.error("Scanning bower packages failed:", err);
          process.exit(1);
        }

        for(var i=0; i<bower_pkgs.length; i++) {
          srcunits.push({
            Name: bower_pkgs[i].name,
            Type: "BowerPackage",
            Dir: path.dirname(bower_pkgs[i].path),
            Files: [], // currently do not aggregate filenames
            Dependencies: collectDeps(bower_pkgs[i].dependencies), // also exclude devDeps
            Data: bower_pkgs[i],
            Ops: {depresolve: null, graph: null},
            Config: {}
          });
        }

        console.log(JSON.stringify(srcunits, null, 2));
      });
    });
  })
  .help("scan for CommonJS packages");

parser.command("depresolve")
  .callback(function(opts) {
    var stdin = process.stdin,
    stdout = process.stdout,
    inputChunks = [];

    stdin.resume();
    stdin.setEncoding("utf8");

    stdin.on("data", function (chunk) {
      inputChunks.push(chunk);
    });

    stdin.on("end", function () {
      var inputJSON = inputChunks.join("");
      var commonJSPackage = JSON.parse(inputJSON);

      var remaining = commonJSPackage.Dependencies ? commonJSPackage.Dependencies.length : 0;
      var resolutions = [];

      if (remaining == 0) {
        console.log('[]');
        return;
      }

      commonJSPackage.Dependencies.forEach(function(dep) {
        var i = commonJSPackage.Dependencies.indexOf(dep);
        resolutions[i] = {Raw: dep};
        var spec = dep.name+(dep.version ? "@"+dep.version : "");
        npm.load(function(err, npm) {
          if (err) {
            console.error("npm.load failed: ", err);
            process.exit(1)
          }

          npm.commands.view(["--silent", spec], function(err,data) {
            if (hardcodedRepoURLs[spec]) {
              data = {"": {}}
              err = null
            }

            if (err) {
              resolutions[i].Error = "error occurred while resolving '" + spec + "': " + JSON.stringify(err);
            } else if (!data || Object.keys(data).length == 0) {
              resolutions[i].Error = "no npm package found with spec " + JSON.stringify(spec);
            } else {
              // Choose a version at random if it spits back a lot (TODO(sqs):
              // this is stupid, we want the version that `npm install` would
              // install, not just any random version, especially when
              // version=='*').
              var chooseVersion = Object.keys(data)[0];
              var info = data[chooseVersion];

              var repoURL = "";
              if (hardcodedRepoURLs[spec]) {
                repoURL = hardcodedRepoURLs[spec];
              } else if (info.repository) {
                if (typeof info.repository == "string") repoURL = info.repository;
                else repoURL = info.repository.url;
              }

              resolutions[i].Target = {
                ToRepoCloneURL: repoURL,
	        ToUnit: info.name,
	        ToUnitType: "CommonJSPackage",
	        ToVersionString: info.version,
              };
            }

            remaining--;
            if (remaining == 0) {
              // done resolving all
              console.log(JSON.stringify(resolutions, null, 2));
            }
          });
        });
      });
    });
  })
  .help("resolves dependencies of a CommonJS package");

var hardcodedRepoURLs = {};

parser.command("graph")
  .callback(function(opts) {
    var stdin = process.stdin,
    stdout = process.stdout,
    inputChunks = [];

    stdin.resume();
    stdin.setEncoding("utf8");

    stdin.on("data", function (chunk) {
      inputChunks.push(chunk);
    });

    stdin.on("end", function () {
      var inputJSON = inputChunks.join("");
      var commonJSPackage = JSON.parse(inputJSON);

      function graph() {
        if (commonJSPackage.Files.length == 0) {
          console.log("{}");
          process.exit(0);
        }
        jsgAdapter.run(".", commonJSPackage, function(err, graphData) {
          if (err) {
            console.error("Graphing " + commonJSPackage.Name + " failed:", err);
            process.exit(1);
          }
          console.log(JSON.stringify(graphData, null, 2));
        });
      }

      // TODO(sqs) install npm deps if we're in a docker container, since we can't rely on
      // them to have been installed locally. we need to account for the fact
      // that we've mounted the source volume readonly, so we can't just run
      // `npm install`.
      if (process.env.IN_DOCKER_CONTAINER && commonJSPackage.Config.npmInstall) {
        // running `npm install` in the /src dir fails because it's mounted
        // readonly. but `npm install -g` in the /src dir does nothing. so we
        // need to `npm install /src` from a dir other than /src to get `npm
        // install` to do anything.

        var packageDir = path.join("/src", commonJSPackage.Dir);
        console.error("Installing npm package in dir", packageDir, "...");
        execFile("npm", ["install", "--ignore-scripts", packageDir], {cwd: "/"}, function(err, stdout, stderr) {
          if (stderr) console.error(stderr);
          if (stdout) console.error(stdout);
          if (err) {
            console.error("warning: npm install in Docker container failed: ", err, "(continuing with graphing...)");
          }
          graph();
        });


        // It's apparently impossible to silence npm install output when using
        // npm.install. :(
        // var oldcwd = process.cwd();
        // process.chdir(path.join(oldcwd, ".."));
        // console.error("npm installing packages in Docker container...");
        // npm.load({loglevel: "silent"}, function(err, npm) {
        //   if (err) {
        //     console.error("npm.load in Docker container failed: ", err);
        //     process.exit(1)
        //   }
        //   // TODO(sqs): only works for top-level package.jsons. we actually need
        //   // "/src/${dirname(package.json path)", which also requires us to
        //   // track the path to the package.json.
        //   npm.commands.install(["/src"], function(err,data) {
        //     if (err) {
        //       console.error("npm install in Docker container failed: ", err);
        //       process.exit(1)
        //     }
        //     process.chdir(oldcwd);
        //     graph();
        //   });
        // });
      } else {
        graph();
      }
    });
  })
  .help("graph a CommonJS package using jsg/tern");

parser.parse();

var arrayUnique = function(a) {
    return a.reduce(function(p, c) {
        if (p.indexOf(c) < 0) p.push(c);
        return p;
    }, []);
};
